#Использовать cmdline
#Использовать fs
#Использовать logos
#Использовать json

Перем Лог;
Перем Сервер;
Перем Токен;
Перем Соединение;


Процедура ПриСозданииОбъекта(АдресСервера, ТокенАутентификации = "")
	
	Лог = ПолучитьЛог();
	Сервер = АдресСервера;
	Токен = ТокенАутентификации;

КонецПроцедуры

Функция ПолучитьЛог()

	Если Лог = Неопределено Тогда
		Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	КонецЕсли;
	Возврат Лог;

КонецФункции

Функция НовыйСоединение()

	Если Соединение = Неопределено Тогда
		Соединение = Новый HTTPСоединение(Сервер);
	КонецЕсли;

	Возврат Соединение;

КонецФункции

Процедура ПолучитьПоследнийРелиз(Знач КаталогСохранения, Знач ИДПроекта) Экспорт

	ТекстЗапроса = СтрШаблон("/api/v4/projects/%1/releases", ИДПроекта);
	Соединение = НовыйСоединение();
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PRIVATE-TOKEN", Токен);
	Запрос = Новый HTTPЗапрос(ТекстЗапроса, Заголовки);

	Ответ = Соединение.Получить(Запрос);
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение "Не удалось получить данные релизов проекта";
	КонецЕсли;

	ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку();
	ПарсерJSON = Новый ПарсерJSON;
	СтруктураОтвета = ПарсерJSON.ПрочитатьJSON(ОтветСтрокой);

	Если СтруктураОтвета.Количество() = 0 Тогда
		Лог.Информация("Не найдено релизов проекта.");	
		Возврат;
	КонецЕсли;

	КрайнийРелиз = СтруктураОтвета[0];
	Сообщить(ТипЗнч(КрайнийРелиз));

	Если КрайнийРелиз["assets"] <> Неопределено 
		И КрайнийРелиз["assets"]["links"] <> Неопределено Тогда
		Для каждого ВложенныйФайл Из КрайнийРелиз["assets"]["links"] Цикл
			Запрос = Новый HTTPЗапрос(ВложенныйФайл["url"], Заголовки);
			Ответ = Соединение.Получить(Запрос);
			Если Ответ.КодСостояния <> 200 Тогда
				ВызватьИсключение "Не удалось получить артефакт релиза проекта";
			КонецЕсли;
			ИмяФайла = ОбъединитьПути(КаталогСохранения, ВложенныйФайл["name"]) + ".cf";
			Лог.Отладка(ИмяФайла);
			ФайлРелиза = Ответ.ПолучитьТелоКакДвоичныеДанные();
			ФайлРелиза.Записать(ИмяФайла);
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьРелиз(Знач ИДПроекта) Экспорт

	ТекстЗапроса = СтрШаблон("/api/v4/projects/%1/releases", ИДПроекта);
	Соединение = НовыйСоединение();
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PRIVATE-TOKEN", Токен);
	Запрос = Новый HTTPЗапрос(ТекстЗапроса, Заголовки);

	СтруктураЗапроса = Новый Соответствие;
	СтруктураЗапроса.Вставить("tag_name", "v0.1");
	СтруктураЗапроса.Вставить("ref", "master");
	ПарсерJSON = Новый ПарсерJSON;
	ТекстЗапроса = ПарсерJSON.ЗаписатьJSON(СтруктураЗапроса);
	Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);

	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение "Не удалось создать релиз проекта";
	КонецЕсли;

КонецПроцедуры

Функция ЗагрузитьФайл(Знач ПутьКФайлу, Знач ИДПроекта) Экспорт
	
// получилось загрузить файл только через curl

	СтрокаЗапуска = "curl --request POST --header ""PRIVATE-TOKEN: %1"" --form ""file=@%2"" ""http://%3/api/v4/projects/%4/uploads""";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, Токен, ПутьКФайлу, Сервер, ИДПроекта);

	Лог.Отладка(СтрокаЗапуска);
	
	Результат = ВыполнитьКоманду(СтрокаЗапуска);
	Лог.Отладка(Результат);

	ОтветСервера = Лев(Результат, СтрНайти(Результат, "}"));

	ПарсерJSON = Новый ПарсерJSON;
	СтруктураОтвета = ПарсерJSON.ПрочитатьJSON(ОтветСервера);

	ПутьКФайлу = СтруктураОтвета["full_path"];
	Лог.Отладка(ПутьКФайлу);

	Возврат ПутьКФайлу; 
	
КонецФункции

Процедура СоздатьРелиз(Знач ИДПроекта) Экспорт

	
КонецПроцедуры

Процедура ПолучитьФайл(Знач ПутьСохранения, Знач СсылкаНаФайл, Знач ИДПроекта) Экспорт

	СтрокаЗапуска = "curl -o %1 ""http://%2/%3""";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска, ПутьСохранения, Сервер, СсылкаНаФайл);

	Лог.Отладка(СтрокаЗапуска);
	
	Результат = ВыполнитьКоманду(СтрокаЗапуска);

КонецПроцедуры

Функция ВыполнитьКоманду(СтрокаЗапуска)

	Команда = Новый Команда;
	Команда.УстановитьПравильныйКодВозврата(0);
	Команда.ПоказыватьВыводНемедленно(Ложь);
	Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);
	КодВозврата = Команда.Исполнить();
	Результат = Команда.ПолучитьВывод();
	Если КодВозврата <> 0 Тогда
		ВызватьИсключение СтрШаблон("Код возврата не равен 0, а равен %1", КодВозврата);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция _ЗагрузитьФайл(Знач ПутьКФайлу, Знач ИДПроекта)
	Соединение = НовыйСоединение();
	ТекстЗапроса = СтрШаблон("/api/v4/projects/%1/uploads", ИДПроекта);
	
	Разделитель = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	РазделительСтрок = Символы.ВК + Символы.ПС;
	ТипКонтента = СтрШаблон("multipart/form-data; boundary=%1", Разделитель);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PRIVATE-TOKEN", Токен);
	Заголовки.Вставить("Content-Type", ТипКонтента);
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса, Заголовки);

	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	ТелоЗапроса = HTTPЗапрос.ПолучитьТелоКакПоток();
	ЗаписьДанных = Новый ЗаписьДанных(ТелоЗапроса, КодировкаТекста.UTF8, ПорядокБайтов.LittleEndian, "", "", Ложь);
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + РазделительСтрок);
	ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; file=""@filename""" + РазделительСтрок);
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: multipart/form-data" + РазделительСтрок);
	ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	ЗаписьДанных.Записать(ДвоичныеДанные);
	ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);
	
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
	ЗаписьДанных.Закрыть();

	Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Лог.Отладка("Ответ: " + Ответ.ПолучитьТелоКакСтроку());
	
КонецФункции