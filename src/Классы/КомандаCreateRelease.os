///////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды gitlab
//
// Структура модуля реализована в соответствии с рекомендациями 
// oscript-app-template (C) EvilBeaver
//
///////////////////////////////////////////////////////////////////

#Использовать fs
#Использовать logos
#Использовать v8runner

Перем Лог;

Функция ПолучитьЛог()
	Если Лог = Неопределено Тогда
		Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	КонецЕсли;
	Возврат Лог;
КонецФункции

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "     Создание файлов поставки cf, cfu");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--releases-dir", "Каталог с файлами релизов");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--ibconnection", "Строка подключения к базе");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-user", "Имя пользователя БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-pwd", "Пароль пользователя БД");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--v8version", "Используемая версия 1С");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--release-mask", "Маска номера релиза в виде регулярного выражения. 
																	|Например: ^(v)\d+(\.)\d+$ (v1.1))");

	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры // ЗарегистрироватьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры - Соответствие - дополнительные параметры (необязательно)
//
// Возвращаемое значение:
//   Число - результат выполнения команды
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры) Экспорт

	Лог = ПолучитьЛог();
	Лог.Отладка("Команда создания релиза");

	Для каждого Параметр Из ПараметрыКоманды Цикл
		Лог.Отладка(Параметр.Ключ + " " + Параметр.значение);
	КонецЦикла;

	КаталогИсходников = ПараметрыКоманды["--releases-dir"];
	СтрокаСоединения = ПараметрыКоманды["--ibconnection"];
	ИмяПользователя = ПараметрыКоманды["--db-user"];
	Пароль = ПараметрыКоманды["--db-pwd"];
	ВерсияПлатформы = ПараметрыКоманды["--v8version"];
	МаскаИмениКаталога = ПараметрыКоманды["--release-mask"];

	Ожидаем.Что(СтрокаСоединения, "Не указана строка соединения с базой").Заполнено();

	Если ПустаяСтрока(МаскаИмениКаталога) Тогда
		МаскаИмениКаталога = ".*";
	КонецЕсли;

	Если ПустаяСтрока(КаталогИсходников) Тогда
		КаталогИсходников = "./";
	КонецЕсли;

	ПоследнийРелиз = ПолучитьКаталогАктуальнойВерсии(КаталогИсходников, МаскаИмениКаталога);
	
	КаталогДляСохранения = ОбщегоНазначения.НовоеИмяРелиза(ПоследнийРелиз);
	КаталогДляСохранения = ОбъединитьПути(КаталогИсходников, КаталогДляСохранения);
	ФС.ОбеспечитьПустойКаталог(КаталогДляСохранения);

	СтрокаСоединения = ОбщегоНазначения.ПереопределитьПутьКБазе(СтрокаСоединения);

	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		УправлениеКонфигуратором.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	УправлениеКонфигуратором.УстановитьКонтекст(СтрокаСоединения, ИмяПользователя, Пароль);
	
	ДистрибутивыДляОбновления = Новый Массив;
	ДистрибутивыДляОбновления.Добавить(ОбъединитьПути(КаталогИсходников, ПоследнийРелиз, "1Cv8.cf"));

	ИмяФайлаКонфигурации = ОбъединитьПути(КаталогДляСохранения, "1Cv8.cf");
	ИмяФайлаОбновления = ОбъединитьПути(КаталогДляСохранения, "1Cv8.cfu");
	
	Лог.Информация("Запущена процедура создания файлов поставки в каталоге " + КаталогДляСохранения);
	УправлениеКонфигуратором.СоздатьФайлыПоставки(ИмяФайлаКонфигурации, ИмяФайлаОбновления, ДистрибутивыДляОбновления);
	Лог.Информация("Созданы файлы поставки");

	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;

КонецФункции // ВыполнитьКоманду

Функция ПолучитьКаталогАктуальнойВерсии(Знач Путь, Знач МаскаИмениКаталога)
	
	РегулярноеВыражение = Новый РегулярноеВыражение(МаскаИмениКаталога);
	Каталоги = НайтиФайлы(Путь, "*.*");
	АктуальнаяВерсия = "v0";
	Для каждого Каталог Из Каталоги Цикл
		Если ФС.КаталогСуществует(Каталог.ПолноеИмя) 
			И РегулярноеВыражение.Совпадает(Каталог.Имя) Тогда

			Лог.Отладка(Каталог.Имя);	
			УстановитьАктуальнуюВерсию(АктуальнаяВерсия, Каталог.Имя);
		КонецЕсли;
	КонецЦикла;

	Лог.Отладка("Актуальная версия: " + АктуальнаяВерсия);
	Возврат АктуальнаяВерсия;
	
КонецФункции

Процедура УстановитьАктуальнуюВерсию(АктуальнаяВерсия, ТекущаяВерсия)

	ТекущаяВерсияБезДопСимволов = ИсключитьБуквыИзИмени(ТекущаяВерсия);
	АктуальнаяВерсияБезДопСимволов = ИсключитьБуквыИзИмени(АктуальнаяВерсия);

	МассивТекущаяВерсия  = СтрРазделить(ТекущаяВерсияБезДопСимволов, ".");
	МассивАктуальнаяВерсия  = СтрРазделить(АктуальнаяВерсияБезДопСимволов, ".");
	НачКоличество = МассивАктуальнаяВерсия.ВГраница() + 1;
	Для Индекс = НачКоличество По МассивТекущаяВерсия.ВГраница() Цикл
		МассивАктуальнаяВерсия.Добавить("0");
	КонецЦикла;

	Для Индекс = 0 По МассивТекущаяВерсия.ВГраница() Цикл
		Если Число(МассивТекущаяВерсия[Индекс]) > Число(МассивАктуальнаяВерсия[Индекс]) Тогда
				АктуальнаяВерсия = ТекущаяВерсия;
			Прервать;
		ИначеЕсли МассивТекущаяВерсия[Индекс] < МассивАктуальнаяВерсия[Индекс] Тогда	
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ИсключитьБуквыИзИмени(Знач НомерВерсии)

	РегулярноеВыражение = Новый РегулярноеВыражение("[^0-9,\.]");
	Возврат РегулярноеВыражение.Заменить(НомерВерсии, "");	

КонецФункции
